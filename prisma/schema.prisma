// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//VALIDATIONS TOKENS

model ValidationToken {
  id      String  @id @unique @default(uuid())
  token   String  @unique
  hasUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("validationsTokens")
}

//USER
model User {
  id           String    @id @unique @default(uuid())
  name         String
  email        String    @unique
  isBlocked    Boolean   @default(false)
  passwordHash String
  lastAccess   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permissions UserPermissions[]
  Companies   UserCompanies[]

  @@map("users")
}

model UserPermissions {
  id           String   @id @unique @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id])

  @@map("userPermissions")
}

model UserCompanies {
  id        String  @id @unique @default(uuid())
  userId    String
  companyId String
  owner     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("userCompanies")
}

model Permission {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permissions UserPermissions[]

  @@map("permissions")
}

//COMPANY

model Company {
  id                   String  @id @unique @default(uuid())
  name                 String
  CNPJ                 String? @unique
  CPF                  String? @unique
  contactNumber        String
  image                String
  isBlocked            Boolean @default(false)
  isNotifyingOnceAWeek Boolean @default(false)
  supportLink          String?

  canAccessChecklists Boolean @default(false)
  canAccessTickets    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserCompanies UserCompanies[]

  Categories          Category[]
  Maintenances        Maintenance[]
  Buildings           Building[]
  MaintenancesHistory MaintenanceHistory[]

  @@map("companies")
}

//CATEGORIES AND MAINTENANCES TYPES
model CategoryAndMaintenanceTypes {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Categories   Category[]
  Maintenances Maintenance[]

  @@map("categoryAndMaintenanceTypes")
}

//CATEGORIES

model Category {
  id             String  @id @unique @default(uuid())
  ownerCompanyId String?
  categoryTypeId String?

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OwnerCompany            Company?                  @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  Maintenances            Maintenance[]
  Buildings               BuildingCategory[]
  DefaultTemplateCategory DefaultTemplateCategory[]

  CategoryType CategoryAndMaintenanceTypes? @relation(fields: [categoryTypeId], references: [id])

  @@map("categories")
}

// MAINTENANCES
model Maintenance {
  id                String  @id @unique @default(uuid())
  categoryId        String
  ownerCompanyId    String?
  maintenanceTypeId String?

  element                 String
  activity                String
  frequency               Int
  frequencyTimeIntervalId String
  responsible             String
  source                  String
  period                  Int
  periodTimeIntervalId    String
  delay                   Int
  delayTimeIntervalId     String
  observation             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category              Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  OwnerCompany          Company?              @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  BuildingsMaintenances BuildingMaintenance[]

  FrequencyTimeInterval TimeInterval @relation(name: "MaintenanceFrequency", fields: [frequencyTimeIntervalId], references: [id])
  PeriodTimeInterval    TimeInterval @relation(name: "MaintenancePeriod", fields: [periodTimeIntervalId], references: [id])
  DelayTimeInterval     TimeInterval @relation(name: "MaintenanceDelay", fields: [delayTimeIntervalId], references: [id])

  MaintenancesHistory        MaintenanceHistory[]
  DefaultTemplateMaintenance DefaultTemplateMaintenance[]

  MaintenanceType CategoryAndMaintenanceTypes? @relation(fields: [maintenanceTypeId], references: [id])

  @@map("maintenances")
}

model MaintenanceHistory {
  id                  String @id @unique @default(uuid())
  buildingId          String
  maintenanceId       String
  ownerCompanyId      String
  maintenanceStatusId String

  notificationDate DateTime
  dueDate          DateTime
  resolutionDate   DateTime?
  wasNotified      Boolean   @default(false)
  inProgress       Boolean   @default(false)
  daysInAdvance    Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building                 Building                   @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  Maintenance              Maintenance                @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  Company                  Company                    @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  MaintenancesStatus       MaintenancesStatus         @relation(fields: [maintenanceStatusId], references: [id], onDelete: Cascade)
  MaintenanceReport        MaintenanceReport[]
  MaintenanceReportHistory MaintenanceReportHistory[]

  MaintenanceReportProgress MaintenanceReportProgress[]

  @@map("maintenancesHistory")
}

model MaintenanceReport {
  id     String @id @unique @default(uuid())
  origin String @default("Company")

  maintenanceHistoryId String
  observation          String?
  cost                 Float?
  responsibleSyndicId  String?
  version              Float   @default(1.00)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)

  ReportAnnexes            MaintenanceReportAnnexes[]
  ReportImages             MaintenanceReportImages[]
  ResponsibleSyndic        BuildingNotificationConfiguration? @relation(fields: [responsibleSyndicId], references: [id], onDelete: Cascade)
  MaintenanceReportHistory MaintenanceReportHistory[]

  @@map("maintenancesReports")
}

model MaintenanceReportAnnexes {
  id                  String @id @unique @default(uuid())
  maintenanceReportId String

  name         String
  originalName String
  url          String

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  MaintenanceReport MaintenanceReport @relation(fields: [maintenanceReportId], references: [id], onDelete: Cascade)

  @@map("maintenancesReportsAnnexes")
}

model MaintenanceReportImages {
  id                  String @id @unique @default(uuid())
  maintenanceReportId String

  name         String
  originalName String
  url          String

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  MaintenanceReport MaintenanceReport @relation(fields: [maintenanceReportId], references: [id], onDelete: Cascade)

  @@map("maintenancesReportsImages")
}

model MaintenanceReportHistory {
  id                  String @id @unique @default(uuid())
  maintenanceReportId String

  origin String @default("Company")

  maintenanceHistoryId String
  observation          String?
  cost                 Float?

  version Float @default(1.00)

  MaintenanceReportHistory MaintenanceReport @relation(fields: [maintenanceReportId], references: [id], onDelete: Cascade)

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)

  ReportAnnexes MaintenanceReportAnnexesHistory[]
  ReportImages  MaintenanceReportImagesHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenancesReportsHistory")
}

model MaintenanceReportAnnexesHistory {
  id String @id @unique @default(uuid())

  maintenanceReportHistoryId String

  MaintenanceReportHistory MaintenanceReportHistory @relation(fields: [maintenanceReportHistoryId], references: [id], onDelete: Cascade)

  name         String
  originalName String
  url          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenancesReportsAnnexesHistory")
}

model MaintenanceReportImagesHistory {
  id                         String                   @id @unique @default(uuid())
  maintenanceReportHistoryId String
  MaintenanceReportHistory   MaintenanceReportHistory @relation(fields: [maintenanceReportHistoryId], references: [id], onDelete: Cascade)

  name         String
  originalName String
  url          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenancesReportsImagesHistory")
}

model MaintenanceReportProgress {
  id String @id @unique @default(uuid())

  maintenanceHistoryId String  @unique
  observation          String?
  cost                 Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)

  ReportAnnexesProgress MaintenanceReportAnnexesProgress[]
  ReportImagesProgress  MaintenanceReportImagesProgress[]

  @@map("maintenanceReportProgresses")
}

model MaintenanceReportAnnexesProgress {
  id                          String @id @unique @default(uuid())
  maintenanceReportProgressId String

  name         String
  originalName String
  url          String

  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  MaintenanceReportProgress MaintenanceReportProgress @relation(fields: [maintenanceReportProgressId], references: [id], onDelete: Cascade)

  @@map("maintenanceReportAnnexesProgresses")
}

model MaintenanceReportImagesProgress {
  id                          String @id @unique @default(uuid())
  maintenanceReportProgressId String

  name         String
  originalName String
  url          String

  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  MaintenanceReportProgress MaintenanceReportProgress @relation(fields: [maintenanceReportProgressId], references: [id], onDelete: Cascade)

  @@map("maintenanceReportImagesProgresses")
}

model TimeInterval {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique
  unitTime      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceFrequency Maintenance[] @relation("MaintenanceFrequency")
  MaintenancePeriod    Maintenance[] @relation("MaintenancePeriod")
  MaintenanceDelay     Maintenance[] @relation("MaintenanceDelay")
  checklists           Checklist[]

  @@map("timeIntervals")
}

model MaintenancesStatus {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenancesHistory MaintenanceHistory[]

  @@map("maintenancesStatus")
}

//BUILDINGS

model BuildingType {
  id   String @id @unique @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Buildings Building[]

  @@map("buildingsTypes")
}

model Building {
  id     String @id @unique @default(uuid())
  nanoId String @unique @default(nanoid(12))

  buildingTypeId String
  companyId      String

  name                              String
  cep                               String?
  city                              String?
  state                             String?
  neighborhood                      String?
  streetName                        String?
  area                              String?
  deliveryDate                      DateTime
  warrantyExpiration                DateTime
  keepNotificationAfterWarrantyEnds Boolean
  mandatoryReportProof              Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BuildingType                BuildingType                        @relation(fields: [buildingTypeId], references: [id], onDelete: Cascade)
  Company                     Company                             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  NotificationsConfigurations BuildingNotificationConfiguration[]
  Categories                  BuildingCategory[]
  Annexes                     BuildingAnnexe[]
  Banners                     BuildingBanners[]
  MaintenancesHistory         MaintenanceHistory[]
  oldBuildingIds              oldBuildingIds[]
  BuildingFolders             BuildingFolders[]
  BuildingsAccessHistory      BuildingAccessHistory[]
  checklists                  Checklist[]
  tickets                     Ticket[]

  @@map("buildings")
}

model BuildingNotificationConfiguration {
  id     String @id @unique @default(uuid())
  nanoId String @unique @default(nanoid(12))

  buildingId String

  name                     String
  email                    String?
  emailIsConfirmed         Boolean  @default(false)
  role                     String
  contactNumber            String?
  contactNumberIsConfirmed Boolean  @default(false)
  isMain                   Boolean  @default(false)
  showContact              Boolean  @default(false)
  lastNotificationDate     DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building          Building            @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  MaintenanceReport MaintenanceReport[]
  checklists        Checklist[]

  @@map("buildingsNotificationsConfigurations")
}

model BuildingCategory {
  id         String @id @unique @default(uuid())
  buildingId String
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building     Building              @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  Category     Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Maintenances BuildingMaintenance[]

  @@map("buildingsCategories")
}

model BuildingMaintenance {
  id                 String @id @unique @default(uuid())
  buildingCategoryId String
  maintenanceId      String

  daysToAnticipate Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BuildingCategory BuildingCategory @relation(fields: [buildingCategoryId], references: [id], onDelete: Cascade)
  Maintenance      Maintenance      @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@map("buildingsMaintenances")
}

model BuildingAnnexe {
  id         String @id @unique @default(uuid())
  buildingId String

  name         String
  originalName String
  url          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsAnnexes")
}

model BuildingBanners {
  id         String @id @unique @default(uuid())
  buildingId String

  bannerName   String
  originalName String
  url          String
  type         String
  redirectUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsBanners")
}

model oldBuildingIds {
  id            String @id @unique @default(uuid())
  buildingId    String
  oldBuildingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("oldBuildingIds")
}

model BuildingFolders {
  id         String @id @unique @default(uuid())
  buildingId String
  folderId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building       Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  BuildingFolder Folders  @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("buildingFolders")
}

model Folders {
  id       String  @id @unique @default(uuid())
  parentId String?
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Parent  Folders?      @relation("folderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  Folders Folders[]     @relation("folderToFolder")
  Files   FolderFiles[]

  BuildingFolders BuildingFolders[]

  @@map("folders")
}

model FolderFiles {
  id       String  @id @unique @default(uuid())
  folderId String?
  name     String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Folders Folders? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("folderFiles")
}

model BuildingAccessHistory {
  id         String @id @unique @default(uuid())
  buildingId String
  key        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsAccessHistory")
}

model Supplier {
  id String @id @unique @default(uuid())

  name           String
  description    String
  image          String
  link           String
  occupationArea String

  phone           String?
  email           String?
  contractedValue Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  regions SupplierRegion[]

  @@map("suppliers")
}

enum SupplierRegionType {
  country
  state
  city
}

model SupplierRegion {
  id String @id @unique @default(uuid())

  type       SupplierRegionType
  supplierId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplier Supplier              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  states   SupplierRegionState[]
  cities   SupplierRegionCity[]

  @@map("supplierRegions")
}

model SupplierRegionState {
  id String @id @unique @default(uuid())

  supplierRegionId String
  state            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  region SupplierRegion @relation(fields: [supplierRegionId], references: [id], onDelete: Cascade)

  @@map("supplierRegionStates")
}

model SupplierRegionCity {
  id String @id @unique @default(uuid())

  supplierRegionId String
  city             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  region SupplierRegion @relation(fields: [supplierRegionId], references: [id], onDelete: Cascade)

  @@map("supplierRegionCities")
}

// DEFAULT TEMPLATE MAINTENANCES
model DefaultMaintenanceTemplate {
  id   String @id @unique @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DefaultTemplateCategories DefaultTemplateCategory[]

  @@map("defaultMaintenanceTemplates")
}

model DefaultTemplateCategory {
  id                           String @id @unique @default(uuid())
  defaultMaintenanceTemplateId String
  categoryId                   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DefaultTemplateMaintenances DefaultTemplateMaintenance[]
  DefaultMaintenanceTemplate  DefaultMaintenanceTemplate   @relation(fields: [defaultMaintenanceTemplateId], references: [id], onDelete: Cascade)
  Category                    Category                     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("defaultTemplateCategories")
}

model DefaultTemplateMaintenance {
  id                        String @id @unique @default(uuid())
  defaultTemplateCategoryId String
  maintenanceId             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DefaultTemplateCategory DefaultTemplateCategory @relation(fields: [defaultTemplateCategoryId], references: [id], onDelete: Cascade)
  Maintenance             Maintenance             @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@map("defaultTemplateMaintenances")
}

// CHECKLISTS
model Checklist {
  id String @id @default(uuid())

  buildingId              String
  syndicId                String
  name                    String
  description             String?
  date                    DateTime
  resolutionDate          DateTime?
  frequency               Int?
  frequencyTimeIntervalId String?
  observation             String?
  status                  ChecklistStatusName
  groupId                 String              @default(nanoid(12))

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building              Building                          @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  syndic                BuildingNotificationConfiguration @relation(fields: [syndicId], references: [id], onDelete: Cascade)
  frequencyTimeInterval TimeInterval?                     @relation(fields: [frequencyTimeIntervalId], references: [id])

  images       ChecklistImage[]
  detailImages ChecklistDetailImage[]

  @@map("checklists")
}

// Essas são as imagens do "relato", Ficou com o nome ruim porque só depois que veio as imagens da checklist padrão.
model ChecklistImage {
  id String @id @default(uuid())

  checklistId String
  name        String
  url         String

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklistImages")
}

enum ChecklistStatusName {
  pending
  completed
}

model ChecklistDetailImage {
  id String @id @default(uuid())

  checklistId String
  name        String
  url         String

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklistDetailImages")
}

// TICKETS
model Ticket {
  id String @id @default(uuid())

  residentName      String
  residentApartment String
  residentEmail     String?
  description       String
  placeId           String
  statusName        TicketStatusName
  buildingId        String
  ticketNumber      Int              @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building Building            @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  status   TicketStatus        @relation(fields: [statusName], references: [name])
  place    TicketPlace         @relation(fields: [placeId], references: [id])
  images   TicketImage[]
  types    TicketServiceType[]

  @@map("tickets")
}

enum TicketStatusName {
  open
  finished
  awaitingToFinish
}

model TicketStatus {
  name            TicketStatusName @id
  label           String           @unique
  color           String
  backgroundColor String

  tickets Ticket[]

  @@map("ticketStatus")
}

model TicketImage {
  id String @id @default(uuid())

  ticketId String
  name     String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticketImages")
}

model TicketPlace {
  id    String @id @default(uuid())
  label String @unique

  ticket Ticket[]

  @@map("ticketPlaces")
}

model ServiceType {
  id    String @id @default(uuid())
  label String @unique

  tickets TicketServiceType[]

  @@map("serviceTypes")
}

model TicketServiceType {
  ticketId      String
  serviceTypeId String

  ticket Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  type   ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)

  @@id([ticketId, serviceTypeId])
  @@map("ticketServiceTypes")
}
