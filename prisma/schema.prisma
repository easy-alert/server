// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//VALIDATIONS TOKENS

model ValidationToken {
  id      String  @id @unique @default(uuid())
  token   String
  hasUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("validationsTokens")
}

//USER
model User {
  id           String    @id @unique @default(uuid())
  name         String
  email        String    @unique
  isBlocked    Boolean   @default(false)
  passwordHash String
  lastAccess   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permissions UserPermissions[]
  Companies   UserCompanies[]

  @@map("users")
}

model UserPermissions {
  id           String   @id @unique @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id])

  @@map("userPermissions")
}

model UserCompanies {
  id        String  @id @unique @default(uuid())
  userId    String
  companyId String
  owner     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("userCompanies")
}

model Permission {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permissions UserPermissions[]

  @@map("permissions")
}

//COMPANY

model Company {
  id            String  @id @unique @default(uuid())
  name          String
  CNPJ          String? @unique
  CPF           String? @unique
  contactNumber String
  image         String
  isBlocked     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserCompanies UserCompanies[]

  Categories   Category[]
  Maintenances Maintenance[]
  Buildings    Building[]

  @@map("companies")
}

//CATEGORIES

model Category {
  id             String  @id @unique @default(uuid())
  ownerCompanyId String?

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OwnerCompany Company?      @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  Maintenances Maintenance[]

  @@map("categories")
}

// MAINTENANCES
model Maintenance {
  id             String  @id @unique @default(uuid())
  categoryId     String
  ownerCompanyId String?

  element                 String
  activity                String
  frequency               Int
  frequencyTimeIntervalId String
  responsible             String
  source                  String
  period                  Int
  periodTimeIntervalId    String
  delay                   Int
  delayTimeIntervalId     String
  observation             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  OwnerCompany Company? @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)

  FrequencyTimeInterval TimeInterval @relation(name: "MaintenanceFrequency", fields: [frequencyTimeIntervalId], references: [id])
  PeriodTimeInterval    TimeInterval @relation(name: "MaintenancePeriod", fields: [periodTimeIntervalId], references: [id])
  DelayTimeInterval     TimeInterval @relation(name: "MaintenanceDelay", fields: [delayTimeIntervalId], references: [id])

  @@map("maintenances")
}

model TimeInterval {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique
  unitTime      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceFrequency Maintenance[] @relation("MaintenanceFrequency")
  MaintenancePeriod    Maintenance[] @relation("MaintenancePeriod")
  MaintenanceDelay     Maintenance[] @relation("MaintenanceDelay")

  @@map("timeIntervals")
}

//BUILDINGS

model BuildingType {
  id   String @id @unique @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Buildings Building[]

  @@map("buildingsTypes")
}

model Building {
  id             String @id @unique @default(uuid())
  buildingTypeId String
  companyId      String

  name                              String
  cep                               String?
  city                              String?
  state                             String?
  neighborhood                      String?
  streetName                        String?
  area                              String?
  deliveryDate                      DateTime
  warrantyExpiration                DateTime
  keepNotificationAfterWarrantyEnds Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BuildingType              BuildingType                        @relation(fields: [buildingTypeId], references: [id], onDelete: Cascade)
  Company                   Company                             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  NotificationConfiguration BuildingNotificationConfiguration[] //arrumar plural

  @@map("buildings")
}

model BuildingNotificationConfiguration {
  id         String @id @unique @default(uuid())
  buildingId String

  name                     String
  email                    String
  emailIsConfirmed         Boolean @default(false)
  role                     String
  contactNumber            String
  contactNumberIsConfirmed Boolean @default(false)
  isMain                   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Building  Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsNotificationsConfigurations")
}
