// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// VALIDATIONS TOKENS
model ValidationToken {
  id      String  @id @unique @default(uuid())
  token   String  @unique
  hasUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("validationsTokens")
}

// USER
model User {
  id String @id @unique @default(uuid())

  name                   String
  email                  String    @unique
  emailIsConfirmed       Boolean   @default(false)
  phoneNumber            String?   @unique
  phoneNumberIsConfirmed Boolean   @default(false)
  passwordHash           String
  role                   String?
  image                  String?
  isBlocked              Boolean   @default(false)
  isMainContact          Boolean   @default(false)
  showContact            Boolean   @default(false)
  lastNotificationDate   DateTime  @default(now())
  lastAccess             DateTime?

  colorScheme String? @default("#B21D1D")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permissions                      UserPermissions[]
  UserBuildingsPermissions         UserBuildingsPermissions[]
  Companies                        UserCompanies[]
  MaintenanceHistory               MaintenanceHistoryUsers[] // New relation field
  Ticket                           Ticket[]
  TicketReportPDF                  TicketReportPDF[]
  Checklist                        Checklist[]
  reportPdfs                       MaintenanceReportPdf[]
  MaintenanceAdditionalInformation MaintenanceAdditionalInformation[]
  ApiLogs                          ApiLogs[]
  ChecklistReportPDF               ChecklistReportPDF[]
  PushNotification                 PushNotification[]
  ChecklistUsers                   ChecklistUsers[]

  @@unique([email, phoneNumber])
  @@map("users")
}

model PushNotification {
  id String @id @unique @default(uuid())

  userId   String
  token    String @unique
  deviceId String
  os       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pushNotifications")
}

model Permission {
  id String @id @unique @default(uuid())

  name        String  @unique
  label       String?
  moduleName  String?
  moduleLabel String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permissions              UserPermissions[]
  UserBuildingsPermissions UserBuildingsPermissions[]

  @@map("permissions")
}

model UserPermissions {
  id String @id @unique @default(uuid())

  companyId    String?
  userId       String
  permissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company    Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId, permissionId])
  @@map("userPermissions")
}

model UserBuildingsPermissions {
  id String @id @unique @default(uuid())

  userId       String
  buildingId   String
  permissionId String?

  isMainContact Boolean @default(false)
  showContact   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Building   Building    @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  Permission Permission? @relation(fields: [permissionId], references: [id], onDelete: SetNull)

  @@unique([userId, buildingId])
  @@map("userBuildingsPermissions")
}

model UserCompanies {
  id        String @id @default(uuid())
  userId    String
  companyId String

  owner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("userCompanies")
}

// COMPANY
model Company {
  id                   String            @id @unique @default(uuid())
  name                 String
  CNPJ                 String?           @unique
  CPF                  String?           @unique
  contactNumber        String
  image                String
  isBlocked            Boolean           @default(false)
  isNotifyingOnceAWeek Boolean           @default(false)
  ticketType           CompanyTicketType @default(platform)
  ticketInfo           String?

  canAccessChecklists Boolean @default(false)
  canAccessTickets    Boolean @default(false)

  showMaintenancePriority Boolean @default(true)

  receivePreviousMonthReports Boolean @default(false)
  receiveDailyDueReports      Boolean @default(false)

  completedMaintenanceScore             Int?
  completedMaintenanceScoreCalculatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserCompanies UserCompanies[]

  Categories           Category[]
  Maintenances         Maintenance[]
  Buildings            Building[]
  MaintenancesHistory  MaintenanceHistory[]
  suppliers            Supplier[]
  reportPdfs           MaintenanceReportPdf[]
  TicketReportPDF      TicketReportPDF[]
  BuildingApartment    BuildingApartment[]
  ApiLogs              ApiLogs[]
  ChecklistReportPDF   ChecklistReportPDF[]
  ChecklistTemplate    ChecklistTemplate[]
  UserPermissions      UserPermissions[]
  Guarantee            Guarantee[]
  GuaranteeSystem      GuaranteeSystem[]
  GuaranteeFailureType GuaranteeFailureType[]

  @@map("companies")
}

enum CompanyTicketType {
  none
  whatsapp
  email
  link
  platform
}

// CATEGORIES AND MAINTENANCES TYPES
model CategoryAndMaintenanceTypes {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Categories   Category[]
  Maintenances Maintenance[]

  @@map("categoryAndMaintenanceTypes")
}

// CATEGORIES

model Category {
  id             String  @id @unique @default(uuid())
  ownerCompanyId String?
  categoryTypeId String?

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OwnerCompany            Company?                  @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  Maintenances            Maintenance[]
  Buildings               BuildingCategory[]
  DefaultTemplateCategory DefaultTemplateCategory[]
  suppliers               CategorySupplier[]

  CategoryType CategoryAndMaintenanceTypes? @relation(fields: [categoryTypeId], references: [id])

  @@map("categories")
}

model CategorySupplier {
  id String @id @default(uuid())

  categoryId String
  supplierId String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, supplierId])
  @@map("categorySuppliers")
}

// MAINTENANCES
model Maintenance {
  id                String  @id @unique @default(uuid())
  categoryId        String
  ownerCompanyId    String?
  maintenanceTypeId String?

  element                 String
  activity                String
  frequency               Int
  frequencyTimeIntervalId String
  responsible             String
  source                  String
  period                  Int
  periodTimeIntervalId    String
  delay                   Int
  delayTimeIntervalId     String
  observation             String?
  priorityName            MaintenancePriorityName @default(low)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category              Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  OwnerCompany          Company?              @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  BuildingsMaintenances BuildingMaintenance[]

  FrequencyTimeInterval TimeInterval @relation(name: "MaintenanceFrequency", fields: [frequencyTimeIntervalId], references: [id])
  PeriodTimeInterval    TimeInterval @relation(name: "MaintenancePeriod", fields: [periodTimeIntervalId], references: [id])
  DelayTimeInterval     TimeInterval @relation(name: "MaintenanceDelay", fields: [delayTimeIntervalId], references: [id])

  MaintenancesHistory        MaintenanceHistory[]
  DefaultTemplateMaintenance DefaultTemplateMaintenance[]

  MaintenanceType    CategoryAndMaintenanceTypes? @relation(fields: [maintenanceTypeId], references: [id])
  suggestedSuppliers MaintenanceSupplier[]
  instructions       MaintenanceInstruction[]

  priority                         MaintenancePriority                @relation(fields: [priorityName], references: [name])
  MaintenanceAdditionalInformation MaintenanceAdditionalInformation[]

  @@map("maintenances")
}

model MaintenanceInstruction {
  id String @id @default(uuid())

  maintenanceId String
  name          String
  url           String

  maintenance Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@map("maintenanceInstructions")
}

model MaintenanceAdditionalInformation {
  id String @id @unique @default(uuid())

  buildingId    String
  maintenanceId String
  userId        String?

  information String

  maintenance Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  building    Building    @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([buildingId, maintenanceId])
  @@map("maintenanceAdditionalInformations")
}

model MaintenanceHistory {
  id String @id @unique @default(uuid())

  buildingId          String
  maintenanceId       String
  ownerCompanyId      String
  maintenanceStatusId String

  notificationDate   DateTime
  dueDate            DateTime
  resolutionDate     DateTime?
  daysInAdvance      Int       @default(0)
  serviceOrderNumber Int       @default(0)
  wasNotified        Boolean   @default(false)
  inProgress         Boolean   @default(false)
  showToResident     Boolean   @default(true)

  priorityName MaintenancePriorityName @default(low)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building           Building            @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  Maintenance        Maintenance         @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  Company            Company             @relation(fields: [ownerCompanyId], references: [id], onDelete: Cascade)
  MaintenancesStatus MaintenancesStatus  @relation(fields: [maintenanceStatusId], references: [id], onDelete: Cascade)
  priority           MaintenancePriority @relation(fields: [priorityName], references: [name])

  MaintenanceReport         MaintenanceReport[]
  MaintenanceReportHistory  MaintenanceReportHistory[]
  MaintenanceReportProgress MaintenanceReportProgress[]

  tickets    Ticket[]
  suppliers  MaintenanceHistorySupplier[]
  activities MaintenanceHistoryActivity[]

  Users MaintenanceHistoryUsers[]

  @@map("maintenancesHistory")
}

model MaintenanceReport {
  id     String @id @unique @default(uuid())
  origin String @default("Company")

  maintenanceHistoryId String
  observation          String?
  cost                 Float?
  responsibleSyndicId  String?
  version              Float   @default(1.00)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)

  ReportAnnexes            MaintenanceReportAnnexes[]
  ReportImages             MaintenanceReportImages[]
  ResponsibleSyndic        BuildingNotificationConfiguration? @relation(fields: [responsibleSyndicId], references: [id], onDelete: SetNull)
  MaintenanceReportHistory MaintenanceReportHistory[]

  @@map("maintenancesReports")
}

model MaintenanceReportAnnexes {
  id                  String @id @unique @default(uuid())
  maintenanceReportId String

  name         String
  originalName String
  url          String

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  MaintenanceReport MaintenanceReport @relation(fields: [maintenanceReportId], references: [id], onDelete: Cascade)

  @@map("maintenancesReportsAnnexes")
}

model MaintenanceReportImages {
  id                  String @id @unique @default(uuid())
  maintenanceReportId String

  name         String
  originalName String
  url          String

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  MaintenanceReport MaintenanceReport @relation(fields: [maintenanceReportId], references: [id], onDelete: Cascade)

  @@map("maintenancesReportsImages")
}

model MaintenanceReportHistory {
  id                  String @id @unique @default(uuid())
  maintenanceReportId String

  origin String @default("Company")

  maintenanceHistoryId String
  observation          String?
  cost                 Float?

  version Float @default(1.00)

  MaintenanceReportHistory MaintenanceReport @relation(fields: [maintenanceReportId], references: [id], onDelete: Cascade)

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)

  ReportAnnexes MaintenanceReportAnnexesHistory[]
  ReportImages  MaintenanceReportImagesHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenancesReportsHistory")
}

model MaintenanceReportAnnexesHistory {
  id String @id @unique @default(uuid())

  maintenanceReportHistoryId String

  MaintenanceReportHistory MaintenanceReportHistory @relation(fields: [maintenanceReportHistoryId], references: [id], onDelete: Cascade)

  name         String
  originalName String
  url          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenancesReportsAnnexesHistory")
}

model MaintenanceReportImagesHistory {
  id                         String                   @id @unique @default(uuid())
  maintenanceReportHistoryId String
  MaintenanceReportHistory   MaintenanceReportHistory @relation(fields: [maintenanceReportHistoryId], references: [id], onDelete: Cascade)

  name         String
  originalName String
  url          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenancesReportsImagesHistory")
}

model MaintenanceReportProgress {
  id String @id @unique @default(uuid())

  maintenanceHistoryId String  @unique
  observation          String?
  cost                 Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)

  ReportAnnexesProgress MaintenanceReportAnnexesProgress[]
  ReportImagesProgress  MaintenanceReportImagesProgress[]

  @@map("maintenanceReportProgresses")
}

model MaintenanceReportAnnexesProgress {
  id                          String @id @unique @default(uuid())
  maintenanceReportProgressId String

  name         String
  originalName String
  url          String

  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  MaintenanceReportProgress MaintenanceReportProgress @relation(fields: [maintenanceReportProgressId], references: [id], onDelete: Cascade)

  @@map("maintenanceReportAnnexesProgresses")
}

model MaintenanceReportImagesProgress {
  id                          String @id @unique @default(uuid())
  maintenanceReportProgressId String

  name         String
  originalName String
  url          String

  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  MaintenanceReportProgress MaintenanceReportProgress @relation(fields: [maintenanceReportProgressId], references: [id], onDelete: Cascade)

  @@map("maintenanceReportImagesProgresses")
}

enum MaintenancePriorityName {
  low
  medium
  high
}

model MaintenancePriority {
  name MaintenancePriorityName @id

  label           String @unique
  color           String
  backgroundColor String

  Maintenance        Maintenance[]
  MaintenanceHistory MaintenanceHistory[]

  @@map("maintenancePriorities")
}

model TimeInterval {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique
  unitTime      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenanceFrequency Maintenance[] @relation("MaintenanceFrequency")
  MaintenancePeriod    Maintenance[] @relation("MaintenancePeriod")
  MaintenanceDelay     Maintenance[] @relation("MaintenanceDelay")
  checklists           Checklist[]

  @@map("timeIntervals")
}

model MaintenancesStatus {
  id            String @id @unique @default(uuid())
  name          String @unique
  singularLabel String @unique
  pluralLabel   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MaintenancesHistory MaintenanceHistory[]

  @@map("maintenancesStatus")
}

model MaintenanceHistoryUsers {
  id String @id @unique @default(uuid())

  maintenanceHistoryId String
  userId               String

  MaintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([maintenanceHistoryId, userId])
  @@map("maintenanceHistoryUsers")
}

// BUILDINGS
model BuildingType {
  id   String @id @unique @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Buildings Building[]

  @@map("buildingsTypes")
}

enum NextMaintenanceCreationBasis {
  executionDate
  notificationDate
}

model Building {
  id     String @id @unique @default(uuid())
  nanoId String @unique @default(nanoid(12))

  buildingTypeId String
  companyId      String

  name                              String
  cep                               String?
  city                              String?
  state                             String?
  neighborhood                      String?
  streetName                        String?
  area                              String?
  deliveryDate                      DateTime
  warrantyExpiration                DateTime
  keepNotificationAfterWarrantyEnds Boolean
  mandatoryReportProof              Boolean  @default(false)
  isActivityLogPublic               Boolean  @default(false)
  guestCanCompleteMaintenance       Boolean  @default(true)
  image                             String?
  isBlocked                         Boolean  @default(false)

  residentPassword String?
  syndicPassword   String?

  nextMaintenanceCreationBasis NextMaintenanceCreationBasis @default(executionDate)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BuildingType BuildingType @relation(fields: [buildingTypeId], references: [id], onDelete: Cascade)
  Company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  NotificationsConfigurations      BuildingNotificationConfiguration[]
  Categories                       BuildingCategory[]
  Annexes                          BuildingAnnexe[]
  Banners                          BuildingBanners[]
  MaintenancesHistory              MaintenanceHistory[]
  oldBuildingIds                   oldBuildingIds[]
  BuildingFolders                  BuildingFolders[]
  BuildingsAccessHistory           BuildingAccessHistory[]
  checklists                       Checklist[]
  tickets                          Ticket[]
  UserBuildingsPermissions         UserBuildingsPermissions[]
  BuildingApartments               BuildingApartment[]
  MaintenanceAdditionalInformation MaintenanceAdditionalInformation[]
  ChecklistTemplate                ChecklistTemplate[]
  Guarantee                        Guarantee[]

  @@map("buildings")
}

model BuildingApartment {
  id String @id @unique @default(uuid())

  companyId  String
  buildingId String

  number String
  floor  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsApartments")
}

model BuildingNotificationConfiguration {
  id     String @id @unique @default(uuid())
  nanoId String @unique @default(nanoid(12))

  buildingId String

  name                     String
  email                    String?
  emailIsConfirmed         Boolean  @default(false)
  role                     String
  contactNumber            String?
  contactNumberIsConfirmed Boolean  @default(false)
  isMain                   Boolean  @default(false)
  showContact              Boolean  @default(false)
  lastNotificationDate     DateTime @default(now())
  password                 String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building          Building            @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  MaintenanceReport MaintenanceReport[]
  Ticket            Ticket[]

  @@map("buildingsNotificationsConfigurations")
}

model BuildingCategory {
  id         String @id @unique @default(uuid())
  buildingId String
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building     Building              @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  Category     Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Maintenances BuildingMaintenance[]

  @@map("buildingsCategories")
}

model BuildingMaintenance {
  id                 String @id @unique @default(uuid())
  buildingCategoryId String
  maintenanceId      String

  daysToAnticipate Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BuildingCategory BuildingCategory @relation(fields: [buildingCategoryId], references: [id], onDelete: Cascade)
  Maintenance      Maintenance      @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@map("buildingsMaintenances")
}

model BuildingAnnexe {
  id         String @id @unique @default(uuid())
  buildingId String

  name         String
  originalName String
  url          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsAnnexes")
}

model BuildingBanners {
  id         String @id @unique @default(uuid())
  buildingId String

  originalName String
  url          String
  redirectUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsBanners")
}

model oldBuildingIds {
  id            String @id @unique @default(uuid())
  buildingId    String
  oldBuildingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("oldBuildingIds")
}

model BuildingFolders {
  id         String @id @unique @default(uuid())
  buildingId String
  folderId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building       Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  BuildingFolder Folders  @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("buildingFolders")
}

model Folders {
  id       String  @id @unique @default(uuid())
  parentId String?
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Parent  Folders?      @relation("folderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  Folders Folders[]     @relation("folderToFolder")
  Files   FolderFiles[]

  BuildingFolders BuildingFolders[]

  @@map("folders")
}

model FolderFiles {
  id       String  @id @unique @default(uuid())
  folderId String?
  name     String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Folders Folders? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("folderFiles")
}

model BuildingAccessHistory {
  id         String @id @unique @default(uuid())
  buildingId String
  key        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("buildingsAccessHistory")
}

model Supplier {
  id String @id @unique @default(uuid())

  image String
  name  String
  state String
  city  String

  cnpj  String?
  phone String?
  email String?
  link  String?

  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company             Company                      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  maintenances        MaintenanceSupplier[]
  maintenancesHistory MaintenanceHistorySupplier[]
  categories          CategorySupplier[]

  @@map("suppliers")
}

// DEFAULT TEMPLATE MAINTENANCES
model DefaultMaintenanceTemplate {
  id   String @id @unique @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DefaultTemplateCategories DefaultTemplateCategory[]

  @@map("defaultMaintenanceTemplates")
}

model DefaultTemplateCategory {
  id                           String @id @unique @default(uuid())
  defaultMaintenanceTemplateId String
  categoryId                   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DefaultTemplateMaintenances DefaultTemplateMaintenance[]
  DefaultMaintenanceTemplate  DefaultMaintenanceTemplate   @relation(fields: [defaultMaintenanceTemplateId], references: [id], onDelete: Cascade)
  Category                    Category                     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("defaultTemplateCategories")
}

model DefaultTemplateMaintenance {
  id                        String @id @unique @default(uuid())
  defaultTemplateCategoryId String
  maintenanceId             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DefaultTemplateCategory DefaultTemplateCategory @relation(fields: [defaultTemplateCategoryId], references: [id], onDelete: Cascade)
  Maintenance             Maintenance             @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@map("defaultTemplateMaintenances")
}

// CHECKLISTS
model Checklist {
  id String @id @default(uuid())

  buildingId   String
  templateId   String?
  finishedById String?

  name                    String
  description             String?
  date                    DateTime
  resolutionDate          DateTime?
  frequency               Int?
  frequencyTimeIntervalId String?
  observation             String?
  status                  ChecklistStatusName
  groupId                 String              @default(nanoid(12))

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building              Building           @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  finishedBy            User?              @relation(fields: [finishedById], references: [id], onDelete: SetNull)
  frequencyTimeInterval TimeInterval?      @relation(fields: [frequencyTimeIntervalId], references: [id])
  template              ChecklistTemplate? @relation(fields: [templateId], references: [id], onDelete: Restrict)

  checklistItem  ChecklistItem[]
  images         ChecklistImage[]
  detailImages   ChecklistDetailImage[]
  checklistUsers ChecklistUsers[]

  @@map("checklists")
}

model ChecklistItem {
  id String @id @default(uuid())

  checklistId String

  name        String
  description String?
  status      ChecklistItemStatusName @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklistItems")
}

model ChecklistTemplate {
  id String @id @default(uuid())

  companyId  String @default("248573d2-5927-4ff1-aeff-4de8bf1144cb")
  buildingId String

  name        String
  description String?
  items       ChecklistTemplateItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  Checklist Checklist[]

  @@map("checklistTemplates")
}

model ChecklistTemplateItem {
  id String @id @default(uuid())

  templateId String

  name String

  checklistTemplate ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("checklistTemplateItems")
}

// Essas são as imagens do "relato", Ficou com o nome ruim porque só depois que veio as imagens da checklist padrão.
model ChecklistImage {
  id String @id @default(uuid())

  checklistId String
  name        String
  url         String

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklistImages")
}

enum ChecklistStatusName {
  pending
  inProgress
  completed
}

enum ChecklistItemStatusName {
  pending
  approved
  rejected
}

model ChecklistDetailImage {
  id String @id @default(uuid())

  checklistId String
  name        String
  url         String

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklistDetailImages")
}

model ChecklistReportPDF {
  id String @id @default(uuid())

  authorId        String
  authorCompanyId String

  name   String
  url    String?
  status ReportPDFStatusName @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author        User    @relation(fields: [authorId], references: [id])
  authorCompany Company @relation(fields: [authorCompanyId], references: [id])

  @@map("checklistReportPdfs")
}

model ChecklistUsers {
  id String @id @default(uuid())

  checklistId String
  userId      String

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([checklistId, userId])
  @@map("checklistUsers")
}

// region TICKETS
model Ticket {
  id String @id @default(uuid())

  buildingId           String
  placeId              String
  maintenanceHistoryId String?

  ticketNumber      Int
  residentName      String
  residentPhone     String?
  residentApartment String
  residentEmail     String?
  residentCPF       String?
  description       String
  statusName        TicketStatusName
  signature         String?
  collaborator      String?
  seen              Boolean          @default(false)
  showToResident    Boolean          @default(false)

  dismissReasonName  TicketDismissReasonsName?
  dismissObservation String?
  dismissedById      String?
  dismissedByUserId  String?
  dismissedAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building           Building                           @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  status             TicketStatus                       @relation(fields: [statusName], references: [name])
  place              TicketPlace                        @relation(fields: [placeId], references: [id])
  images             TicketImage[]
  types              TicketServiceType[]
  maintenanceHistory MaintenanceHistory?                @relation(fields: [maintenanceHistoryId], references: [id], onDelete: SetNull)
  activities         TicketHistoryActivities[]
  dismissReasons     TicketDismissReasons?              @relation(fields: [dismissReasonName], references: [name])
  dismissedBy        BuildingNotificationConfiguration? @relation(fields: [dismissedById], references: [id], onDelete: SetNull)
  dismissedByUser    User?                              @relation(fields: [dismissedByUserId], references: [id])

  @@map("tickets")
}

enum TicketStatusName {
  open
  awaitingToFinish
  finished
  dismissed
}

model TicketStatus {
  name            TicketStatusName @id
  label           String           @unique
  color           String
  backgroundColor String

  tickets Ticket[]

  @@map("ticketStatus")
}

enum TicketDismissReasonsName {
  outOfWarranty
  outOfResponsibility
  lackOfInformation
  lackOfResources
  lackOfApproval
  other
}

model TicketDismissReasons {
  name TicketDismissReasonsName @id

  label           String @unique
  color           String
  backgroundColor String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]

  @@map("ticketDismissReasons")
}

model TicketImage {
  id String @id @default(uuid())

  ticketId String
  name     String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticketImages")
}

model TicketPlace {
  id    String @id @default(uuid())
  label String @unique

  ticket Ticket[]

  @@map("ticketPlaces")
}

model TicketServiceType {
  ticketId      String
  serviceTypeId String

  ticket Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  type   ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)

  @@id([ticketId, serviceTypeId])
  @@map("ticketServiceTypes")
}

enum TicketHistoryActivityType {
  comment
  notification
}

model TicketHistoryActivities {
  id String @id @default(uuid())

  ticketId String
  type     TicketHistoryActivityType
  title    String
  content  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket                        @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  images TicketHistoryActivityImages[]

  @@map("ticketHistoryActivities")
}

model TicketHistoryActivityImages {
  id String @id @default(uuid())

  activityId String
  name       String
  url        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activity TicketHistoryActivities @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("ticketHistoryActivityImages")
}

enum ReportPDFStatusName {
  pending
  finished
  failed
}

model TicketReportPDF {
  id String @id @default(uuid())

  name            String
  url             String?
  authorId        String
  authorCompanyId String
  status          ReportPDFStatusName @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author        User    @relation(fields: [authorId], references: [id])
  authorCompany Company @relation(fields: [authorCompanyId], references: [id])

  @@map("ticketReportPdfs")
}

model ServiceType {
  id String @id @default(uuid())

  name          String? @unique
  singularLabel String  @default("Serviço")
  label         String  @unique @default("Serviços")
  pluralLabel   String  @default("Serviços")

  color           String @default("#000000")
  backgroundColor String @default("#FFFFFF")

  tickets TicketServiceType[]

  @@map("serviceTypes")
}

model MaintenanceSupplier {
  id String @id @default(uuid())

  maintenanceId String
  supplierId    String

  maintenance Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  supplier    Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([maintenanceId, supplierId])
  @@map("maintenanceSuppliers")
}

model MaintenanceHistorySupplier {
  id String @id @default(uuid())

  maintenanceHistoryId String
  supplierId           String

  maintenanceHistory MaintenanceHistory @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)
  supplier           Supplier           @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([maintenanceHistoryId, supplierId])
  @@map("maintenanceHistorySuppliers")
}

enum MaintenanceHistoryActivityType {
  comment
  notification
}

model MaintenanceHistoryActivity {
  id String @id @default(uuid())

  maintenanceHistoryId String
  type                 MaintenanceHistoryActivityType
  title                String
  content              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maintenanceHistory MaintenanceHistory                @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)
  images             MaintenanceHistoryActivityImage[]

  @@map("maintenanceHistoryActivities")
}

model MaintenanceHistoryActivityImage {
  id String @id @default(uuid())

  activityId String
  name       String
  url        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activity MaintenanceHistoryActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("maintenanceHistoryActivityImages")
}

enum MaintenanceReportPdfStatusName {
  pending
  finished
  failed
}

model MaintenanceReportPdf {
  id String @id @default(uuid())

  name            String
  url             String?
  authorId        String
  authorCompanyId String
  status          MaintenanceReportPdfStatusName @default(pending)
  createdAt       DateTime                       @default(now())

  // aqui o cascade talvez não seria o ideal
  author        User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorCompany Company @relation(fields: [authorCompanyId], references: [id], onDelete: Cascade)

  @@map("maintenanceReportPdfs")
}

// GUARANTEE
model GuaranteeSystem {
  id String @id @default(uuid())

  companyId String?

  name String @unique

  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  guarantee Guarantee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("guaranteeSystems")
}

model GuaranteeFailureType {
  id String @id @default(uuid())

  companyId String?

  name String

  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  guarantees GuaranteeToFailureType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("guaranteeFailureTypes")
}

model GuaranteeDocument {
  id String @id @default(uuid())

  guaranteeId String

  name     String
  category String?
  fileUrl  String
  fileType String
  fileSize Int

  guarantee Guarantee @relation(fields: [guaranteeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("guaranteeDocuments")
}

model GuaranteeToFailureType {
  id String @id @default(uuid())

  guaranteeId   String
  failureTypeId String

  guarantee   Guarantee            @relation(fields: [guaranteeId], references: [id], onDelete: Cascade)
  failureType GuaranteeFailureType @relation(fields: [failureTypeId], references: [id])

  @@unique([guaranteeId, failureTypeId])
  @@map("guaranteeToFailureTypes")
}

model Guarantee {
  id String @id @default(uuid())

  companyId  String?
  buildingId String?
  systemId   String

  description            String
  standardWarrantyPeriod Int // in months, converted into years

  startDate DateTime
  endDate   DateTime

  company  Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  building Building?       @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  system   GuaranteeSystem @relation(fields: [systemId], references: [id], onDelete: Cascade)

  documents    GuaranteeDocument[]
  failureTypes GuaranteeToFailureType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, systemId, description, standardWarrantyPeriod])
  @@map("guarantees")
}

// Platform Video
enum PlatformVideoType {
  tutorial
  news
  feature
}

enum PlatformVideoStatus {
  draft
  published
  archived
}

model PlatformVideo {
  id String @id @default(uuid())

  title       String
  description String?
  url         String
  youtubeId   String? @unique
  thumbnail   String?
  order       Int?

  type   PlatformVideoType   @default(tutorial)
  status PlatformVideoStatus @default(draft)

  tags String[] @default([])

  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platformVideos")
}

// FEED ITEMS
enum FeedItemType {
  alert
  announcement
  promotion
}

model FeedItem {
  id String @id @default(uuid())

  title       String
  description String? // Optional: A more detailed body for the feed item

  // Media
  imageUrl String? // Optional: URL to an image asset for the feed item (e.g., a banner, icon)
  videoUrl String? // Optional: If the feed item itself is a short video or links to one directly

  // Call to Action (CTA)
  ctaLink String? // Optional: A URL the user navigates to when clicking (e.g., more info page, external link)
  ctaText String? // Optional: The text to display on the call-to-action button (e.g., "Learn More", "Go to Feature")

  // Categorization & Display Control
  type FeedItemType // Uses the enum to categorize the item (Alert, Announcement, Promotion)

  isPinned Boolean @default(false) // If true, this item will always appear at the top of the feed, regardless of creation date or order.
  order    Int? // Optional: Custom order for items that are not pinned, or to define order *within* the pinned items (lower number = higher priority)

  // Visibility & Lifetime
  startsAt  DateTime? // Optional: Date/time when the item becomes visible to users. If null, visible immediately.
  expiresAt DateTime? // Optional: Date/time when the item stops being visible. If null, remains visible indefinitely.

  // Audit Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedItems")
}

// API LOGS
model ApiLogs {
  id String @id @unique @default(uuid())

  companyId String?
  userId    String?

  body   String?
  path   String?
  query  String?
  params String?
  method String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@map("apiLogs")
}
